name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    outputs:
      package_name: ${{ steps.get_package_info.outputs.package_name }}
      package_version: ${{ steps.get_package_info.outputs.package_version }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install mypy build types-PyYAML
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Type check with mypy
      run: |
        mypy .
    - name: Test with pytest and generate coverage
      run: |
        pytest --cov=server --cov=mcp_devtools --cov-report=term-missing:skip-covered --cov-report=xml --cov-fail-under=75
    - name: Generate coverage summaries
      run: |
        coverage json -o coverage.json
        coverage report -m > coverage.txt
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-artifacts
        path: |
          coverage.json
          coverage.xml
          coverage.txt
    - name: Smoke test server startup
      run: |
        set -e
        echo "Starting server with uvicorn..."
        uvicorn server:app --host 127.0.0.1 --port 8765 --log-level debug &
        SERVER_PID=$!
        
        # Give the server a moment to start
        sleep 2
        
        # Poll until server responds or timeout
        TIMEOUT=30
        ELAPSED=0
        while [ $ELAPSED -lt $TIMEOUT ]; do
          if curl -s http://127.0.0.1:8765/ >/dev/null 2>&1; then
            echo "Server is responding!"
            kill $SERVER_PID
            wait $SERVER_PID 2>/dev/null || true
            exit 0
          fi
          echo "Waiting for server to start... (${ELAPSED}s)"
          sleep 2
          ELAPSED=$((ELAPSED + 2))
        done
        
        # Timeout reached - kill server and fail
        echo "Server failed to start within ${TIMEOUT} seconds"
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true
        exit 1
      shell: bash
    - name: Get package info
      id: get_package_info
      run: |
        PACKAGE_NAME=$(grep 'name =' pyproject.toml | cut -d '"' -f 2)
        PACKAGE_VERSION=$(grep 'version =' pyproject.toml | cut -d '"' -f 2)
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      shell: bash
    - name: Build distribution packages
      run: |
        python -m build
    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: dist/
  pypi-publish:
    name: Upload release to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Publish on all pushes to main
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-devtools
    permissions:
      id-token: write  # this permission is mandatory for trusted publishing
    steps:
    - name: Check if version already exists on PyPI
      id: check_version
      run: |
        PACKAGE_NAME="${{ needs.build.outputs.package_name }}"
        PACKAGE_VERSION="${{ needs.build.outputs.package_version }}"
        echo "Checking if $PACKAGE_NAME version $PACKAGE_VERSION exists on PyPI..."

        # Query PyPI API
        RESPONSE=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json")

        # Check if the version exists in the releases
        if echo "$RESPONSE" | jq -e ".releases.\"$PACKAGE_VERSION\"" > /dev/null; then
          echo "Version $PACKAGE_VERSION already exists on PyPI. Skipping publish."
          echo "should_publish=false" >> $GITHUB_OUTPUT
        else
          echo "Version $PACKAGE_VERSION does not exist on PyPI. Proceeding with publish."
          echo "should_publish=true" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Download all distribution packages
      if: steps.check_version.outputs.should_publish == 'true'
      uses: actions/download-artifact@v4
      with:
        name: python-packages
        path: dist/
    - name: Publish package distributions to PyPI
      if: steps.check_version.outputs.should_publish == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
